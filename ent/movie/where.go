// Code generated by entc, DO NOT EDIT.

package movie

import (
	"imdb-movie/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Movie {
	return predicate.Movie(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Movie {
	return predicate.Movie(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Movie {
	return predicate.Movie(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Movie {
	return predicate.Movie(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Movie {
	return predicate.Movie(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Movie {
	return predicate.Movie(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Movie {
	return predicate.Movie(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Movie {
	return predicate.Movie(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Movie {
	return predicate.Movie(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// Title applies equality check predicate on the "title" field. It's identical to TitleEQ.
func Title(v string) predicate.Movie {
	return predicate.Movie(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTitle), v))
	})
}

// Year applies equality check predicate on the "year" field. It's identical to YearEQ.
func Year(v string) predicate.Movie {
	return predicate.Movie(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldYear), v))
	})
}

// Rated applies equality check predicate on the "rated" field. It's identical to RatedEQ.
func Rated(v float32) predicate.Movie {
	return predicate.Movie(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldRated), v))
	})
}

// RealeaseDate applies equality check predicate on the "realease_date" field. It's identical to RealeaseDateEQ.
func RealeaseDate(v time.Time) predicate.Movie {
	return predicate.Movie(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldRealeaseDate), v))
	})
}

// Genre applies equality check predicate on the "genre" field. It's identical to GenreEQ.
func Genre(v string) predicate.Movie {
	return predicate.Movie(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldGenre), v))
	})
}

// Language applies equality check predicate on the "language" field. It's identical to LanguageEQ.
func Language(v string) predicate.Movie {
	return predicate.Movie(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldLanguage), v))
	})
}

// Poster applies equality check predicate on the "poster" field. It's identical to PosterEQ.
func Poster(v string) predicate.Movie {
	return predicate.Movie(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPoster), v))
	})
}

// TitleEQ applies the EQ predicate on the "title" field.
func TitleEQ(v string) predicate.Movie {
	return predicate.Movie(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTitle), v))
	})
}

// TitleNEQ applies the NEQ predicate on the "title" field.
func TitleNEQ(v string) predicate.Movie {
	return predicate.Movie(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldTitle), v))
	})
}

// TitleIn applies the In predicate on the "title" field.
func TitleIn(vs ...string) predicate.Movie {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Movie(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldTitle), v...))
	})
}

// TitleNotIn applies the NotIn predicate on the "title" field.
func TitleNotIn(vs ...string) predicate.Movie {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Movie(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldTitle), v...))
	})
}

// TitleGT applies the GT predicate on the "title" field.
func TitleGT(v string) predicate.Movie {
	return predicate.Movie(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldTitle), v))
	})
}

// TitleGTE applies the GTE predicate on the "title" field.
func TitleGTE(v string) predicate.Movie {
	return predicate.Movie(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldTitle), v))
	})
}

// TitleLT applies the LT predicate on the "title" field.
func TitleLT(v string) predicate.Movie {
	return predicate.Movie(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldTitle), v))
	})
}

// TitleLTE applies the LTE predicate on the "title" field.
func TitleLTE(v string) predicate.Movie {
	return predicate.Movie(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldTitle), v))
	})
}

// TitleContains applies the Contains predicate on the "title" field.
func TitleContains(v string) predicate.Movie {
	return predicate.Movie(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldTitle), v))
	})
}

// TitleHasPrefix applies the HasPrefix predicate on the "title" field.
func TitleHasPrefix(v string) predicate.Movie {
	return predicate.Movie(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldTitle), v))
	})
}

// TitleHasSuffix applies the HasSuffix predicate on the "title" field.
func TitleHasSuffix(v string) predicate.Movie {
	return predicate.Movie(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldTitle), v))
	})
}

// TitleEqualFold applies the EqualFold predicate on the "title" field.
func TitleEqualFold(v string) predicate.Movie {
	return predicate.Movie(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldTitle), v))
	})
}

// TitleContainsFold applies the ContainsFold predicate on the "title" field.
func TitleContainsFold(v string) predicate.Movie {
	return predicate.Movie(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldTitle), v))
	})
}

// YearEQ applies the EQ predicate on the "year" field.
func YearEQ(v string) predicate.Movie {
	return predicate.Movie(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldYear), v))
	})
}

// YearNEQ applies the NEQ predicate on the "year" field.
func YearNEQ(v string) predicate.Movie {
	return predicate.Movie(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldYear), v))
	})
}

// YearIn applies the In predicate on the "year" field.
func YearIn(vs ...string) predicate.Movie {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Movie(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldYear), v...))
	})
}

// YearNotIn applies the NotIn predicate on the "year" field.
func YearNotIn(vs ...string) predicate.Movie {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Movie(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldYear), v...))
	})
}

// YearGT applies the GT predicate on the "year" field.
func YearGT(v string) predicate.Movie {
	return predicate.Movie(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldYear), v))
	})
}

// YearGTE applies the GTE predicate on the "year" field.
func YearGTE(v string) predicate.Movie {
	return predicate.Movie(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldYear), v))
	})
}

// YearLT applies the LT predicate on the "year" field.
func YearLT(v string) predicate.Movie {
	return predicate.Movie(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldYear), v))
	})
}

// YearLTE applies the LTE predicate on the "year" field.
func YearLTE(v string) predicate.Movie {
	return predicate.Movie(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldYear), v))
	})
}

// YearContains applies the Contains predicate on the "year" field.
func YearContains(v string) predicate.Movie {
	return predicate.Movie(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldYear), v))
	})
}

// YearHasPrefix applies the HasPrefix predicate on the "year" field.
func YearHasPrefix(v string) predicate.Movie {
	return predicate.Movie(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldYear), v))
	})
}

// YearHasSuffix applies the HasSuffix predicate on the "year" field.
func YearHasSuffix(v string) predicate.Movie {
	return predicate.Movie(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldYear), v))
	})
}

// YearEqualFold applies the EqualFold predicate on the "year" field.
func YearEqualFold(v string) predicate.Movie {
	return predicate.Movie(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldYear), v))
	})
}

// YearContainsFold applies the ContainsFold predicate on the "year" field.
func YearContainsFold(v string) predicate.Movie {
	return predicate.Movie(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldYear), v))
	})
}

// RatedEQ applies the EQ predicate on the "rated" field.
func RatedEQ(v float32) predicate.Movie {
	return predicate.Movie(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldRated), v))
	})
}

// RatedNEQ applies the NEQ predicate on the "rated" field.
func RatedNEQ(v float32) predicate.Movie {
	return predicate.Movie(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldRated), v))
	})
}

// RatedIn applies the In predicate on the "rated" field.
func RatedIn(vs ...float32) predicate.Movie {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Movie(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldRated), v...))
	})
}

// RatedNotIn applies the NotIn predicate on the "rated" field.
func RatedNotIn(vs ...float32) predicate.Movie {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Movie(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldRated), v...))
	})
}

// RatedGT applies the GT predicate on the "rated" field.
func RatedGT(v float32) predicate.Movie {
	return predicate.Movie(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldRated), v))
	})
}

// RatedGTE applies the GTE predicate on the "rated" field.
func RatedGTE(v float32) predicate.Movie {
	return predicate.Movie(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldRated), v))
	})
}

// RatedLT applies the LT predicate on the "rated" field.
func RatedLT(v float32) predicate.Movie {
	return predicate.Movie(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldRated), v))
	})
}

// RatedLTE applies the LTE predicate on the "rated" field.
func RatedLTE(v float32) predicate.Movie {
	return predicate.Movie(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldRated), v))
	})
}

// RealeaseDateEQ applies the EQ predicate on the "realease_date" field.
func RealeaseDateEQ(v time.Time) predicate.Movie {
	return predicate.Movie(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldRealeaseDate), v))
	})
}

// RealeaseDateNEQ applies the NEQ predicate on the "realease_date" field.
func RealeaseDateNEQ(v time.Time) predicate.Movie {
	return predicate.Movie(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldRealeaseDate), v))
	})
}

// RealeaseDateIn applies the In predicate on the "realease_date" field.
func RealeaseDateIn(vs ...time.Time) predicate.Movie {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Movie(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldRealeaseDate), v...))
	})
}

// RealeaseDateNotIn applies the NotIn predicate on the "realease_date" field.
func RealeaseDateNotIn(vs ...time.Time) predicate.Movie {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Movie(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldRealeaseDate), v...))
	})
}

// RealeaseDateGT applies the GT predicate on the "realease_date" field.
func RealeaseDateGT(v time.Time) predicate.Movie {
	return predicate.Movie(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldRealeaseDate), v))
	})
}

// RealeaseDateGTE applies the GTE predicate on the "realease_date" field.
func RealeaseDateGTE(v time.Time) predicate.Movie {
	return predicate.Movie(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldRealeaseDate), v))
	})
}

// RealeaseDateLT applies the LT predicate on the "realease_date" field.
func RealeaseDateLT(v time.Time) predicate.Movie {
	return predicate.Movie(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldRealeaseDate), v))
	})
}

// RealeaseDateLTE applies the LTE predicate on the "realease_date" field.
func RealeaseDateLTE(v time.Time) predicate.Movie {
	return predicate.Movie(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldRealeaseDate), v))
	})
}

// GenreEQ applies the EQ predicate on the "genre" field.
func GenreEQ(v string) predicate.Movie {
	return predicate.Movie(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldGenre), v))
	})
}

// GenreNEQ applies the NEQ predicate on the "genre" field.
func GenreNEQ(v string) predicate.Movie {
	return predicate.Movie(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldGenre), v))
	})
}

// GenreIn applies the In predicate on the "genre" field.
func GenreIn(vs ...string) predicate.Movie {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Movie(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldGenre), v...))
	})
}

// GenreNotIn applies the NotIn predicate on the "genre" field.
func GenreNotIn(vs ...string) predicate.Movie {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Movie(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldGenre), v...))
	})
}

// GenreGT applies the GT predicate on the "genre" field.
func GenreGT(v string) predicate.Movie {
	return predicate.Movie(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldGenre), v))
	})
}

// GenreGTE applies the GTE predicate on the "genre" field.
func GenreGTE(v string) predicate.Movie {
	return predicate.Movie(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldGenre), v))
	})
}

// GenreLT applies the LT predicate on the "genre" field.
func GenreLT(v string) predicate.Movie {
	return predicate.Movie(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldGenre), v))
	})
}

// GenreLTE applies the LTE predicate on the "genre" field.
func GenreLTE(v string) predicate.Movie {
	return predicate.Movie(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldGenre), v))
	})
}

// GenreContains applies the Contains predicate on the "genre" field.
func GenreContains(v string) predicate.Movie {
	return predicate.Movie(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldGenre), v))
	})
}

// GenreHasPrefix applies the HasPrefix predicate on the "genre" field.
func GenreHasPrefix(v string) predicate.Movie {
	return predicate.Movie(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldGenre), v))
	})
}

// GenreHasSuffix applies the HasSuffix predicate on the "genre" field.
func GenreHasSuffix(v string) predicate.Movie {
	return predicate.Movie(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldGenre), v))
	})
}

// GenreEqualFold applies the EqualFold predicate on the "genre" field.
func GenreEqualFold(v string) predicate.Movie {
	return predicate.Movie(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldGenre), v))
	})
}

// GenreContainsFold applies the ContainsFold predicate on the "genre" field.
func GenreContainsFold(v string) predicate.Movie {
	return predicate.Movie(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldGenre), v))
	})
}

// LanguageEQ applies the EQ predicate on the "language" field.
func LanguageEQ(v string) predicate.Movie {
	return predicate.Movie(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldLanguage), v))
	})
}

// LanguageNEQ applies the NEQ predicate on the "language" field.
func LanguageNEQ(v string) predicate.Movie {
	return predicate.Movie(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldLanguage), v))
	})
}

// LanguageIn applies the In predicate on the "language" field.
func LanguageIn(vs ...string) predicate.Movie {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Movie(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldLanguage), v...))
	})
}

// LanguageNotIn applies the NotIn predicate on the "language" field.
func LanguageNotIn(vs ...string) predicate.Movie {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Movie(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldLanguage), v...))
	})
}

// LanguageGT applies the GT predicate on the "language" field.
func LanguageGT(v string) predicate.Movie {
	return predicate.Movie(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldLanguage), v))
	})
}

// LanguageGTE applies the GTE predicate on the "language" field.
func LanguageGTE(v string) predicate.Movie {
	return predicate.Movie(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldLanguage), v))
	})
}

// LanguageLT applies the LT predicate on the "language" field.
func LanguageLT(v string) predicate.Movie {
	return predicate.Movie(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldLanguage), v))
	})
}

// LanguageLTE applies the LTE predicate on the "language" field.
func LanguageLTE(v string) predicate.Movie {
	return predicate.Movie(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldLanguage), v))
	})
}

// LanguageContains applies the Contains predicate on the "language" field.
func LanguageContains(v string) predicate.Movie {
	return predicate.Movie(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldLanguage), v))
	})
}

// LanguageHasPrefix applies the HasPrefix predicate on the "language" field.
func LanguageHasPrefix(v string) predicate.Movie {
	return predicate.Movie(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldLanguage), v))
	})
}

// LanguageHasSuffix applies the HasSuffix predicate on the "language" field.
func LanguageHasSuffix(v string) predicate.Movie {
	return predicate.Movie(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldLanguage), v))
	})
}

// LanguageEqualFold applies the EqualFold predicate on the "language" field.
func LanguageEqualFold(v string) predicate.Movie {
	return predicate.Movie(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldLanguage), v))
	})
}

// LanguageContainsFold applies the ContainsFold predicate on the "language" field.
func LanguageContainsFold(v string) predicate.Movie {
	return predicate.Movie(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldLanguage), v))
	})
}

// PosterEQ applies the EQ predicate on the "poster" field.
func PosterEQ(v string) predicate.Movie {
	return predicate.Movie(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPoster), v))
	})
}

// PosterNEQ applies the NEQ predicate on the "poster" field.
func PosterNEQ(v string) predicate.Movie {
	return predicate.Movie(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldPoster), v))
	})
}

// PosterIn applies the In predicate on the "poster" field.
func PosterIn(vs ...string) predicate.Movie {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Movie(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldPoster), v...))
	})
}

// PosterNotIn applies the NotIn predicate on the "poster" field.
func PosterNotIn(vs ...string) predicate.Movie {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Movie(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldPoster), v...))
	})
}

// PosterGT applies the GT predicate on the "poster" field.
func PosterGT(v string) predicate.Movie {
	return predicate.Movie(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldPoster), v))
	})
}

// PosterGTE applies the GTE predicate on the "poster" field.
func PosterGTE(v string) predicate.Movie {
	return predicate.Movie(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldPoster), v))
	})
}

// PosterLT applies the LT predicate on the "poster" field.
func PosterLT(v string) predicate.Movie {
	return predicate.Movie(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldPoster), v))
	})
}

// PosterLTE applies the LTE predicate on the "poster" field.
func PosterLTE(v string) predicate.Movie {
	return predicate.Movie(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldPoster), v))
	})
}

// PosterContains applies the Contains predicate on the "poster" field.
func PosterContains(v string) predicate.Movie {
	return predicate.Movie(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldPoster), v))
	})
}

// PosterHasPrefix applies the HasPrefix predicate on the "poster" field.
func PosterHasPrefix(v string) predicate.Movie {
	return predicate.Movie(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldPoster), v))
	})
}

// PosterHasSuffix applies the HasSuffix predicate on the "poster" field.
func PosterHasSuffix(v string) predicate.Movie {
	return predicate.Movie(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldPoster), v))
	})
}

// PosterEqualFold applies the EqualFold predicate on the "poster" field.
func PosterEqualFold(v string) predicate.Movie {
	return predicate.Movie(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldPoster), v))
	})
}

// PosterContainsFold applies the ContainsFold predicate on the "poster" field.
func PosterContainsFold(v string) predicate.Movie {
	return predicate.Movie(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldPoster), v))
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Movie) predicate.Movie {
	return predicate.Movie(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Movie) predicate.Movie {
	return predicate.Movie(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Movie) predicate.Movie {
	return predicate.Movie(func(s *sql.Selector) {
		p(s.Not())
	})
}
